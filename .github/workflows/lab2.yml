name: Lab 2

on:
  push:
    branches:
      - master
    paths:
      - lab2
      - .github/workflows/lab2.yml
      - .github/workflows/render.yml

permissions:
  contents: write
  pages: write
  deployments: write
  id-token: write

jobs:
  configure_db:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Initialize schema
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab2/init.sql
      - name: Insert data
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab2/values.sql
      - name: Import products
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -c "CREATE TEMP TABLE product_uploaded (
                name text NOT NULL UNIQUE,
                description text,
                price int NOT NULL,
                category text not null
          );" 
          -c "\copy product_uploaded FROM 'lab2/products.csv' WITH (FORMAT CSV, DELIMITER ',', HEADER)"
          -c "INSERT INTO product (name, description, price, category_id) 
              SELECT p.name, p.description, p.price, c.id 
              FROM product_uploaded p 
              JOIN category c ON p.category = c.name;"
      - name: Import product parameters
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -c "CREATE TEMP TABLE product_param_uploaded (
              product_name text NOT NULL, 
              category_param text not null, 
              value text not null
          );" 
          -c "\copy product_param_uploaded FROM 'lab2/product_params.csv' WITH (FORMAT CSV, DELIMITER ',', HEADER)"
          -c "INSERT INTO product_parameter (product_id, category_param_id, value) 
              SELECT p.id, cp.id, pp.value 
              FROM product_param_uploaded pp 
              JOIN product p ON p.name = pp.product_name 
              JOIN category_parameter cp ON cp.category_id = p.category_id AND pp.category_param = cp.name;"
      - name: Import store products
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1 
          -c "CREATE TEMP TABLE store_product_uploaded (
              product_name text NOT NULL, 
              store_name text NOT NULL, 
              amount int NOT NULL
          );" 
          -c "\copy store_product_uploaded FROM 'lab2/store_products.csv' WITH (FORMAT CSV, DELIMITER ',', HEADER)" 
          -c "INSERT INTO store_product (product_id, store_id, amount) 
              SELECT p.id, s.id, sp.amount uploaded_amount 
              FROM store_product_uploaded sp 
              JOIN product p ON p.name = sp.product_name 
              JOIN store s ON s.name = sp.store_name 
              ON CONFLICT (product_id, store_id) DO UPDATE 
              SET amount = store_product.amount + excluded.amount"
      - name: Read data
        run: |
          result=$(PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1 -c "SELECT * FROM products;")
          echo "PRODUCT_RESULT='$result'" >> $GITHUB_ENV
      - name: Create build dir
        run: mkdir build
      - name: Generate diagrams
        run: >
          docker run -v $PWD/build:/output --network=host --user root schemaspy/schemaspy:snapshot
          -t pgsql11 
          -host localhost:5432
          -db postgres 
          -u postgres
          -p password
          -imageformat svg
      - name: Commit generated diagram
        continue-on-error: true # step can fail if there are no updates in the diagram
        run: |
          cp build/diagrams/summary/relationships.real.large.svg img/lab2.svg
          git config --global user.name 'github-actions bot'
          git config --global user.email 'kuzznya@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add img/lab2.svg
          git commit -m "Publish generated diagram"
          git push
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  render:
    needs: configure_db
    uses: ./.github/workflows/render.yml
