name: Lab 4

on:
  push:
    branches:
      - master
    paths:
      - lab3
      - .github/workflows/lab4.yml
      - .github/workflows/render.yml

permissions:
  contents: write
  pages: write
  deployments: write
  id-token: write

jobs:
  configure_db:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    services:
      postgres:
        image: registry.gitlab.com/dalibo/postgresql_anonymizer:stable
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Initialize schema
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab2/init.sql
      - name: Insert data
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab2/values.sql
      - name: Import products
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -c "CREATE TEMP TABLE product_uploaded (
                name text NOT NULL UNIQUE,
                description text,
                price int NOT NULL,
                category text not null
          );" 
          -c "\copy product_uploaded FROM 'lab2/products.csv' WITH (FORMAT CSV, DELIMITER ',', HEADER)"
          -c "INSERT INTO product (name, description, price, category_id) 
              SELECT p.name, p.description, p.price, c.id 
              FROM product_uploaded p 
              JOIN category c ON p.category = c.name;"
      - name: Import product parameters
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -c "CREATE TEMP TABLE product_param_uploaded (
              product_name text NOT NULL, 
              category_param text not null, 
              value text not null
          );" 
          -c "\copy product_param_uploaded FROM 'lab2/product_params.csv' WITH (FORMAT CSV, DELIMITER ',', HEADER)"
          -c "INSERT INTO product_parameter (product_id, category_param_id, value) 
              SELECT p.id, cp.id, pp.value 
              FROM product_param_uploaded pp 
              JOIN product p ON p.name = pp.product_name 
              JOIN category_parameter cp ON cp.category_id = p.category_id AND pp.category_param = cp.name;"
      - name: Import store products
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1 
          -c "CREATE TEMP TABLE store_product_uploaded (
              product_name text NOT NULL, 
              store_name text NOT NULL, 
              amount int NOT NULL
          );" 
          -c "\copy store_product_uploaded FROM 'lab2/store_products.csv' WITH (FORMAT CSV, DELIMITER ',', HEADER)" 
          -c "INSERT INTO store_product (product_id, store_id, amount) 
              SELECT p.id, s.id, sp.amount uploaded_amount 
              FROM store_product_uploaded sp 
              JOIN product p ON p.name = sp.product_name 
              JOIN store s ON s.name = sp.store_name 
              ON CONFLICT (product_id, store_id) DO UPDATE 
              SET amount = store_product.amount + excluded.amount"
      - name: Generate random data
        run: |
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1 \
          -c "INSERT INTO app_user (username, password, name, surname, phone_number)
              SELECT MD5(RANDOM()::TEXT) AS username, 
              '***' AS password, 
              MD5(RANDOM()::TEXT) AS name, 
              MD5(RANDOM()::TEXT) AS surname, 
              MD5(RANDOM()::TEXT) AS phone_number
              FROM generate_series(1, 10000);" \
          -c "INSERT INTO product (name, description, price, category_id)
              SELECT 'generated_' || MD5(RANDOM()::TEXT) AS name,
              MD5(RANDOM()::TEXT) AS description,
              100000 AS price,
              (SELECT id FROM category WHERE name = 'Alcohol')
              FROM generate_series(1, 10000);"
      - name: Create views
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab3/views.sql
      - name: Create indexes
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab3/indexes.sql
      - name: Anonymize database
        run: >
          PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost --echo-all -v ON_ERROR_STOP=1
          -f lab4/anon.sql
      - name: Read data
        id: read_data
        run: |
          app_user_data="$(PGPASSWORD=password psql --dbname=postgres --username=skynet --host=localhost -v ON_ERROR_STOP=1 --html -c 'SELECT * FROM app_user LIMIT 20')"
          app_user_data="${app_user_data//'%'/'%25'}"
          app_user_data="${app_user_data//$'\n'/'%0A'}"
          app_user_data="${app_user_data//$'\r'/'%0D'}"
          echo "::set-output name=APP_USER_DATA::$app_user_data"
          
          store_anon_data="$(PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost -v ON_ERROR_STOP=1 --html -c 'SELECT * FROM store_anon LIMIT 20')"
          store_anon_data="${store_anon_data//'%'/'%25'}"
          store_anon_data="${store_anon_data//$'\n'/'%0A'}"
          store_anon_data="${store_anon_data//$'\r'/'%0D'}"
          echo "::set-output name=STORE_ANON_DATA::$store_anon_data"
          
          store_product_anon_data="$(PGPASSWORD=password psql --dbname=postgres --username=postgres --host=localhost -v ON_ERROR_STOP=1 --html -c 'SELECT * FROM store_product_anon LIMIT 20')"
          store_product_anon_data="${store_product_anon_data//'%'/'%25'}"
          store_product_anon_data="${store_product_anon_data//$'\n'/'%0A'}"
          store_product_anon_data="${store_product_anon_data//$'\r'/'%0D'}"
          echo "::set-output name=STORE_PRODUCT_ANON_DATA::$store_product_anon_data"
      - name: Create build dir
        run: mkdir build
      - name: Generate diagrams
        run: >
          docker run -v $PWD/build:/output --network=host --user root schemaspy/schemaspy:snapshot
          -t pgsql11 
          -host localhost:5432
          -db postgres 
          -u postgres
          -p password
          -imageformat svg
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
    outputs:
      template_values: '{ 
        "APP_USER_DATA": ${{ toJSON(steps.read_data.outputs.APP_USER_DATA) }},
        "STORE_ANON_DATA": ${{ toJSON(steps.read_data.outputs.STORE_ANON_DATA) }},
        "STORE_PRODUCT_ANON_DATA": ${{ toJSON(steps.read_data.outputs.STORE_PRODUCT_ANON_DATA) }}
        }'

  render:
    needs: configure_db
    uses: ./.github/workflows/render.yml
    with:
      path: ./lab4.md
      template_values: ${{ needs.configure_db.outputs.template_values }}

